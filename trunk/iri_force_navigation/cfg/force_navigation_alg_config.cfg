#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='iri_force_navigation'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

#       Name                       Type       Reconfiguration level            Description                       Default   Min   Max
#gen.add("velocity_scale_factor",  double_t,  0,                               "Maximum velocity scale factor",  0.5,      0.0,  1.0)
gen.add("move_base",              bool_t,      0,                           "move base doesnt send platform commands",   False)
gen.add("stop_robot",             bool_t,      0,                           "Stops the robot inmediatly",   False)
gen.add("set_planning",           bool_t,      0,                 "Enables or disables the generation of new paths",   False)
gen.add("manual_planning",         str_t,      0, "global planning manually set, #destiantion=integers separed only by spaces",   "")
gen.add("v_max",                  double_t,    0,                               "Max velocity allowed",           1.2,      0,  5)
gen.add("v_cruise",               double_t,    0,                               "Min velocity allowed",           0.8,      0,  5)
gen.add("time_horizon",           double_t,    0,                               "Time of propagated horizon",     0.2,    0,  20)
gen.add("force_goal",             double_t,    0,                        "Force to goal [blue]",                  1.0,    0.0,  2)
gen.add("force_interaction",      double_t,    0,                   "Force of interaction with target[green]",     9.0,    0.0,  20)
gen.add("force_map",              double_t,    0,             "Force of the obstacles appearing in map[black]",    0.250,    0.0,  1.0)
gen.add("robot_sim",              bool_t,      0,                           "Robot position and movement is simulated",  False)
gen.add("robot_x_ini",           double_t,    0,                        "robot initial x position",       0.0,   -1000.0,     1000.0)
gen.add("robot_y_ini",           double_t,    0,                        "robot initial y position",       0.0,   -1000.0,     1000.0)
gen.add("reference_frame",         str_t,       0,                              "Prediction Reference frame",              "/map")
gen.add("robot_frame",            str_t,       0,                              "Robot specific frame",              "/dabo/base_link")
gen.add("force_map_path",   str_t,   0,    "path to force map file",   "/home")
gen.add("destination_map_path",   str_t,   0,    "path to force map file",   "/home")
exit(gen.generate(PACKAGE, "ForceNavigationAlgorithm", "ForceNavigation"))
