#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='iri_force_robot_companion_learning'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

#       Name                       Type       Reconfiguration level            Description                       Default   Min   Max
#gen.add("velocity_scale_factor",  double_t,  0,                               "Maximum velocity scale factor",  0.5,      0.0,  1.0)
gen.add("using_prediction",       bool_t,      0,                           "Robot companion using prediction",           True)
gen.add("learning_mode",         int_t,      0,                        "Robot companion learning mode (simulated). 0 for density growing perfomrance evaluation and 1 for parameter learning though MCMC",    1,  0,  1)
gen.add("results_folder",        str_t,       0,               "Results folder path. Init only at launch",              "/tmp")
gen.add("reference_frame",        str_t,       0,                              "Reference frame",              "/map")
gen.add("robot_frame",        str_t,       0,                              "Robot specific frame",              "/dabo/base_link")
gen.add("target_person_id",       int_t,       0,                            "Robot approaches targeted person",  0,      0,  100000)
gen.add("v_max",                  double_t,    0,                               "Max velocity allowed",           1.2,      0,  5)
gen.add("v_cruise",               double_t,    0,                               "Min velocity allowed",           1.0,      0,  5)
gen.add("time_horizon",           double_t,    0,                               "Time of propagated horizon",     0.2,    0,  20)
gen.add("force_parameters",       bool_t,      0,                               "Manually set force weights",     False)
gen.add("force_goal",             double_t,    0,                        "Force to goal [blue]",                  0.1,    0.0,  2)
gen.add("force_toperson",         double_t,    0,                               "Force to person [red]",          1.0,    0.0,  2)
gen.add("force_interaction",      double_t,    0,                   "Force of interaction with target[green]",     1.0,    0.0,  100)
gen.add("force_laser",            double_t,    0,     "Force of interacion with near laser obstacles [yellow]",    1.0,    0.0,  1000)
gen.add("laser_radi",             double_t,    0,             "radii afecting the point lasers",                   1.0,    0.0,  1000)
gen.add("force_map",              double_t,    0,             "Force of the obstacles appearing in map[black]",    1.0,    0.0,  1000)
gen.add("r",                      double_t,    0,                           "companion relative radi position",   1.2,    0.0,  10)
gen.add("theta",                  double_t,    0,                           "companion relative polar angle",     90,      0,  180)
gen.add("follow_nearest",         bool_t,      0,                           "Follows nearest person",   False)
gen.add("force_map_path",   str_t,   0,    "path to force map file",   "")
gen.add("destination_map_path",   str_t,   0,    "path to force map file",   "")
gen.add("K_rob_per",                     double_t,    0,                         "Robot-Person parameter K",      2.3,   0,      10)
gen.add("A_rob_per",                      double_t,    0,                           "Robot-Person parameter A",       2.66,      0,     50)
gen.add("B_rob_per",                      double_t,    0,                           "Robot-Person parameter B",       0.79,     0,      10)
gen.add("lambda_rob_per",                 double_t,    0,                         "Robot-Person parameter lambda",      0.59,    0,     1)
gen.add("d_rob_per",                      double_t,    0,                         "Robot-Person parameter d",          0.4,  0,     1)
gen.add("K_obstacle",                      double_t,    0,                         "Obstacle parameter K",       2.3,   0,     50)
gen.add("A_obstacle",                      double_t,    0,                           "Obstacle parameter A",     10.0,  0,      50)
gen.add("B_obstacle",                      double_t,    0,                           "Obstacle parameter B",     0.1,  0,      20)
gen.add("lambda_obs",                 double_t,    0,                         "Obstacle parameter lambda",   1.0, 0,      1.0)
gen.add("d_obstacle",                      double_t,    0,                         "Obstacle parameter d",       0.2,   0,     1)
gen.add("clear_target_traj",              bool_t,      0,                        "clears the drawn target trajectory",   False)
gen.add("virtual_people",       int_t,       0,       "Number of virtual people present at the scen. Simulation only",  0,      0,  5000)
gen.add("robot_x_ini",           double_t,    0,         "robot initial x position.  Simulation only",       0.0,   -1000.0,     1000.0)
gen.add("robot_y_ini",           double_t,    0,          "robot initial y position, Simulation only",       0.0,   -1000.0,     1000.0)
exit(gen.generate(PACKAGE, "ForceRobotCompanionLearningAlgorithm", "ForceRobotCompanionLearning"))
