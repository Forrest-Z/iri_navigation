#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='iri_localization3d'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

#       Name                       Type       Reconfiguration level            Description                       Default   Min   Max
gen.add("debug_mode", int_t,  -1 , "Set debug_mode",  1,      0,  1)
gen.add("filter_rate",  double_t,  -1 , "Filter_rate [Hz]",  5,      1,  20)
gen.add("num_particles",  int_t,  0 , "NumberOfParticles",  50,      20,  400)
gen.add("resampling_style",  int_t,  -1 , "Resampling method",  3,      0,  3)
gen.add("mapFile",  str_t,  -1 , "OBJ file with the 3D_model",  "")
gen.add("floorGridFile",  str_t,  -1 , "TXT file with the elevation grid",  "")
gen.add("initX",  double_t,  -1 , "intial X",  0,      -1000,  1000)
gen.add("initY",  double_t,  -1 , "intial Y",  0,      -1000,  1000)
gen.add("initH",  double_t,  -1 , "intial Heading",  0,      -3.1416,  3.1416)

gen.add("odo_error_XY",  double_t,  -1 , "Percentual odometry translational_error",  0.1,      0.01,  0.5)
gen.add("odo_error_H",  double_t,  -1 , "Percentual odometry heading_error",  0.2,      0.01,  0.5)
gen.add("odo_error_P",  double_t,  -1 , "Percentual odometry pitch_error",  0.1,      0.01,  0.5)
gen.add("odo_error_R",  double_t,  -1 , "Percentual odometry roll_error",  0.1,      0.01,  0.5)

gen.add("sigma_heading",  double_t,  -1 , "Heading standard deviation of the compass [rad]",  0,      -3.1416,  3.1416)
gen.add("sigma_pitch_roll",  double_t,  -1 , "Pitch/Roll standard deviation of the compass [rad]",  0,      -3.1416,  3.1416)

gen.add("l0_frameName",  str_t,  -1 , "FrameName of laser 0",  "")
gen.add("l0_typeId",  int_t,  -1 , "Type id of device laser 0", 0, 0, 7)
gen.add("l0_nRays",  int_t,  -1 , "Number of rays for laser 0", 0, 1, 1000)
gen.add("l0_aperture",  double_t,  -1 , "Scan aperture for laser 0 [rad]", 3.14, 0, 6.28)
gen.add("l0_rMin",  double_t,  -1 , "Minimum range for laser 0 [m]", 0.3, 0, 2)
gen.add("l0_Max",  double_t,  -1 , "Maximum range for laser 0 [m]", 20, 0, 100)
gen.add("l0_sigma_range",  double_t,  -1 , "Standard deviation on laser0 range mesurements [m]", 0.05, 0.01, 0.2)

gen.add("l1_frameName",  str_t,  -1 , "FrameName of laser 1",  "")
gen.add("l1_typeId",  int_t,  -1 , "Type id of device laser 1", 0, 0, 7)
gen.add("l1_nRays",  int_t,  -1 , "Number of rays for laser 1", 0, 1, 1000)
gen.add("l1_aperture",  double_t,  -1 , "Scan aperture for laser 1 [rad]", 3.14, 0, 6.28)
gen.add("l1_rMin",  double_t,  -1 , "Minimum range for laser 1 [m]", 0.3, 0, 2)
gen.add("l1_rMax",  double_t,  -1 , "Maximum range for laser 1 [m]", 20, 0, 100)
gen.add("l1_sigma_range",  double_t,  -1 , "Standard deviation on laser1 range mesurements [m]", 0.05, 0.01, 0.2)

gen.add("l2_frameName",  str_t,  -1 , "FrameName of laser 2",  "")
gen.add("l2_typeId",  int_t,  -1 , "Type id of device laser 2", 0, 0, 7)
gen.add("l2_nRays",  int_t,  -1 , "Number of rays for laser 2", 0, 1, 1000)
gen.add("l2_aperture",  double_t,  -1 , "Scan aperture for laser 2 [rad]", 3.14, 0, 6.28)
gen.add("l2_rMin",  double_t,  -1 , "Minimum range for laser 2 [m]", 0.3, 0, 2)
gen.add("l2_rMax",  double_t,  -1 , "Maximum range for laser 2 [m]", 20, 0, 100)
gen.add("l2_sigma_range",  double_t,  -1 , "Standard deviation on laser2 range mesurements [m]", 0.05, 0.01, 0.2)

exit(gen.generate(PACKAGE, "Localization3dAlgorithm", "Localization3d"))
