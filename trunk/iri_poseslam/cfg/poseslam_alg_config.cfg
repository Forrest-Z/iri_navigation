#! /usr/bin/env python
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the Willow Garage nor the names of its
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# Author: 

PACKAGE='iri_poseslam'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

#        Name                              Type       Reconfig. level  Description                                          Default   Min   Max
gen.add("loop_rate",                       double_t,  0,               "loop rate",                                          2.0,     1.0         )
gen.add("bag_path",                        str_t,     0,               "Bag path",                                           "/experiment.bag"    )
gen.add("initial_position_x",              double_t,  0,               "Initial position (x)",                               0.0                  )
gen.add("initial_position_y",              double_t,  0,               "Initial position (y)",                               0.0                  )
gen.add("initial_position_th",             double_t,  0,               "Initial position (theta)",                           0.0                  )
gen.add("initial_covariance_xx",           double_t,  0,               "Initial covariance (x-x)",                           0.0,      0.0        )
gen.add("initial_covariance_xy",           double_t,  0,               "Initial covariance (x-y)",                           0.0,      0.0        )
gen.add("initial_covariance_xth",          double_t,  0,               "Initial covariance (x-th)",                          0.0,      0.0        )
gen.add("initial_covariance_yy",           double_t,  0,               "Initial covariance (y-y)",                           0.0,      0.0        )
gen.add("initial_covariance_yth",          double_t,  0,               "Initial covariance (y-theta)",                       0.0,      0.0        )
gen.add("initial_covariance_thth",         double_t,  0,               "Initial covariance (theta-theta)",                   0.0,      0.0        )
gen.add("match_area_x",                    double_t,  0,               "Matching area for loop closure (x)",                 3.0,      0.0        )
gen.add("match_area_y",                    double_t,  0,               "Matching area for loop closure (y)",                 3.0,      0.0        )
gen.add("match_area_th",                   double_t,  0,               "Matching area for loop closure (theta)",             0.2617994,0.0        )
gen.add("pd_range_1",                      double_t,  0,               "Prob. threshold for try loop closure",               0.1,      0.0,   1.0 )
gen.add("pd_range_2",                      double_t,  0,               "Prob. threshold for redundant pose",                 0.9,      0.0,   1.0 )
gen.add("ig_range_1",                      double_t,  0,               "Information gain threshold for redundant pose",      1.0,      0.0        )
gen.add("ig_range_2",                      double_t,  0,               "Information gain threshold for try loop closure",    3.0,      0.0        )
gen.add("closing_loop_noise_xx",           double_t,  0,               "Sensor noise for compute information gain (x-x)",    0.04,     0.0        )
gen.add("closing_loop_noise_xy",           double_t,  0,               "Sensor noise for compute information gain (x-y)",    0.0,      0.0        )
gen.add("closing_loop_noise_xth",          double_t,  0,               "Sensor noise for compute information gain (x-th)",   0.0,      0.0        )
gen.add("closing_loop_noise_yy",           double_t,  0,               "Sensor noise for compute information gain (y-y)",    0.04,     0.0        )
gen.add("closing_loop_noise_yth",          double_t,  0,               "Sensor noise for compute information gain (y-th)",   0.0,      0.0        )
gen.add("closing_loop_noise_thth",         double_t,  0,               "Sensor noise for compute information gain(th-th)",   7.61543549467e-05,0.0)
gen.add("also_no_loops",                   bool_t,    0,               "Also a poseSlam filter without loop closure",        True                 )
gen.add("ignore_previous_steps",           int_t,     0,               "Number of previous steps to ignore in loop closure", 1,        1          )

# link service parameters
gen.add("precompute_odoms",                bool_t,    0,               "Precomputation of odometries of consecutive poses",  True                 )
gen.add("online_mode",                     bool_t,    0,               "Do ICP with last scan for odometry in open loop",    True                 )
gen.add("bad_cov_thres",                   double_t,  0,               "Covariance threshold for discarding odometry",       1.0,       0.0       )
gen.add("dz_footprint_2_base",             double_t,  0,               "Distance in z from footprint to base",               0.2667               )
gen.add("dx_base_2_laser",            	   double_t,  0,               "Distance in x from base to laser frames",            0.57                 )
gen.add("dy_base_2_laser",            	   double_t,  0,               "Distance in y from base to laser frames",            0.0                  )
gen.add("dz_base_2_laser",            	   double_t,  0,               "Distance in z from base to laser frames",            0.145                )
gen.add("dth_base_2_laser",           	   double_t,  0,               "Yaw distance from base to laser frames",             0.0                  )
gen.add("cmd_vel_available",               bool_t,    0,               "If the message cmd_vel is published",                True                 )
gen.add("ICP_covariance_correction_factor",double_t,  0,               "ICP covariance factor for compensation",             10.0,     0.0        )

# Trajectory 2 markers parameters
gen.add("marker_color_r",                  double_t,  0,               "R channel of RGB color of trajectory markers",       0.0,    0.0,    1.0  )
gen.add("marker_color_g",                  double_t,  0,               "G channel of RGB color of trajectory markers",       0.5,    0.0,    1.0  )
gen.add("marker_color_b",                  double_t,  0,               "B channel of RGB color of trajectory markers",       0.8,    0.0,    1.0  )
gen.add("marker_color_a",                  double_t,  0,               "transparency of trajectory markers",                 0.5,    0.0,    1.0  )

gen.add("actual_marker_color_r",           double_t,  0,               "R channel of RGB color of actual pose marker",       0.8,    0.0,    1.0  )
gen.add("actual_marker_color_g",           double_t,  0,               "G channel of RGB color of actual pose marker",       0.0,    0.0,    1.0  )
gen.add("actual_marker_color_b",           double_t,  0,               "B channel of RGB color of actual pose marker",       1.0,    0.0,    1.0  )
gen.add("actual_marker_color_a",           double_t,  0,               "transparency of trajectory markers",                 0.8,    0.0,    1.0  )

gen.add("marker_loop_color_r",             double_t,  0,               "R channel of RGB color of loop markers",             1.0,    0.0,    1.0  )
gen.add("marker_loop_color_g",             double_t,  0,               "G channel of RGB color of loop markers",             0.8,    0.0,    1.0  )
gen.add("marker_loop_color_b",             double_t,  0,               "B channel of RGB color of loop markers",             0.0,    0.0,    1.0  )
gen.add("marker_loop_color_a",             double_t,  0,               "transparency of loop markers",                       0.5,    0.0,    1.0  )

gen.add("line_loop_color_r",               double_t,  0,               "R channel of RGB color of loop lines",               1.0,    0.0,    1.0  )
gen.add("line_loop_color_g",               double_t,  0,               "G channel of RGB color of loop lines",               0.8,    0.0,    1.0  )
gen.add("line_loop_color_b",               double_t,  0,               "B channel of RGB color of loop lines",               0.0,    0.0,    1.0  )
gen.add("line_loop_color_a",               double_t,  0,               "transparency of loop lines",                         0.8,    0.0,    1.0  )
gen.add("line_loop_width",                 double_t,  0,               "width of loop lines",                                0.07,   0.0          )

gen.add("line_color_r",                    double_t,  0,               "R channel of RGB color of trajectory lines",         0.0,    0.0,    1.0  )
gen.add("line_color_g",                    double_t,  0,               "G channel of RGB color of trajectory lines",         0.5,    0.0,    1.0  )
gen.add("line_color_b",                    double_t,  0,               "B channel of RGB color of trajectory lines",         0.8,    0.0,    1.0  )
gen.add("line_color_a",                    double_t,  0,               "transparency of trajectory lines",                   0.8,    0.0,    1.0  )
gen.add("line_width",                      double_t,  0,               "width of trajectory lines",                          0.05,   0.0          )

# Trajectory scans 2 pointcloud parameters
gen.add("publish_redundant",               bool_t,    0,               "Also visualize scans from redundant poses",   	     True                 )

# Trajectory 3D scans 2 pointcloud parameters
gen.add("dx_base_2_h3d",                   double_t,  0,               "Distance in x from base to 3D laser frame",          0.0                  )
gen.add("dy_base_2_h3d",                   double_t,  0,               "Distance in y from base to 3D laser frame",          0.0                  )
gen.add("dz_base_2_h3d",                   double_t,  0,               "Distance in z from base to 3D laser frame",          1.0                  )
gen.add("dth_base_2_h3d",                  double_t,  0,               "Yaw distance from base to 3D laser frame",           0.0                  )

# Trajectory Broadcaster parameters
gen.add("odom_frame_id",                   str_t,     0,               "odom frame ID",                                      "odom"               )
gen.add("map_frame_id",                    str_t,     0,               "map frame ID",                                       "map"                )
gen.add("base_frame_id",                   str_t,     0,               "map frame ID",                                       "base"               )


exit(gen.generate(PACKAGE, "PoseslamAlgorithm", "Poseslam"))
